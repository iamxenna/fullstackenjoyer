// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;

import '@openzeppelin/contracts/token/ERC20/ERC20.sol';

contract test is ERC20("CustomToken", "CMT") {

    address private _owner;

    uint256 private _tokenPrice = 2 ether;

    mapping(string => address) private loginMap;
    mapping(address => User) private userMap;
    mapping(address => string) private passwordMap;
    mapping(uint => Review[]) private reviewMapping;
    mapping(address => SellRequest[]) private sellMapping;

    enum Role {
        User,
        Vendor,
        Admin
    }

    enum Status {
        NotCreated,
        WaitingForApprove,
        Approved,
        Canceled
    }

    struct User {
        string login;
        uint age;
        Role role;
    }

    struct Review {
        uint id;
        string login;
        string review;
        uint mark;
    }

    struct SellRequest {
        uint tokensAmount;
        address userAddress;
        Status status;
    }

    constructor(address _address1, address _address2, address _address3) {

        _owner = msg.sender;

        userMap[_address1] = User("ivan", 30, Role.User);
        loginMap["ivan"] = _address1;
        passwordMap[_address1] = "123";
        userMap[_address2] = User("asd", 21, Role.User);
        loginMap["asd"] = _address2;
        passwordMap[_address2] = "123";
        userMap[_address3] = User("admin", 21, Role.Admin);
        loginMap["admin"] = _address3;
        passwordMap[_address3] = "admin";

        _mint(_owner, 1000 * 1 ether);
        _mint(_address1, 1000 * 1 ether);
        _mint(_address2, 1000 * 1 ether);
        _mint(_address3, 1000 * 1 ether);
    }

    function registration(string memory _login, string memory _password, uint _age) public {
        require(loginMap[_login] == address(0), "user already exist");
        loginMap[_login] = msg.sender;
        passwordMap[msg.sender] = _password;
        userMap[msg.sender] = User(_login, _age, Role.User);
    }

    function auth(string memory _login, string memory _password) public view returns (User memory) {
        require(keccak256(abi.encode(userMap[loginMap[_login]].login)) == keccak256(abi.encode(_login)), "unknown user");
        require(keccak256(abi.encode(passwordMap[msg.sender])) == keccak256(abi.encode(_password)), "invalid password");
        return userMap[loginMap[_login]];
    }

    function addAdmin(address _address) public accessLevel(Role.Admin) {
        require(userMap[_address].role != Role.Admin, "admin already exists");
        userMap[_address].role = Role.Admin;
    }

    function addComment(uint _shop_id, string memory _review, uint _mark) public {
        require(_mark <= 10, "rating cantbe more than 10");
        uint _id = reviewMapping[_shop_id].length + 1;
        reviewMapping[_shop_id].push(Review(_id, userMap[msg.sender].login, _review, _mark));
    }

    function getComments(uint _id) public view returns (Review[] memory) {
        return reviewMapping[_id];
    }

    function buyToken(uint256 _amount) external payable {
        payable(_owner).transfer(msg.value);
        transferFrom(_owner, msg.sender, _amount*10**18);
    }

    function getTokenPrice() public view returns (uint) {
        return _tokenPrice;
    }

    function getBalance() public view returns(uint) {
        return msg.sender.balance;
    }

    function requestToSell(uint _amount, address _address) public {
        sellMapping[_address].push(SellRequest(_amount, msg.sender, Status.WaitingForApprove));
    }

    function getRequests(address _address) public accessLevel(Role.Admin) view returns (SellRequest[] memory) {
        return sellMapping[_address];
    }

    function approveRequest(address _address, uint256 _id) public payable {
        payable(_address).transfer(msg.value);
        transferFrom(_address, _owner, sellMapping[_address][_id].tokensAmount * 10 ** 18);
        sellMapping[_address][_id].status = Status.Approved;
    }

    function cancelRequest(address _address, uint256 _id) public {
        sellMapping[_address][_id].status = Status.Canceled;
    }

    function putTheToContract() public payable {

    }

    modifier accessLevel(Role _role) {
        require(userMap[msg.sender].role >= _role, "access denied");
        _;
    }
}
